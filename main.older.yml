---
- hosts: all

  vars:
    tomcat_install_method: packages

  become: true

  tasks:

    - name: EPEL release package
      yum:
        name: epel-release
        state: present

    - name: Ansible module support
      yum:
        name:
          - python-psycopg2
          - unzip
        state: present

    - name: PostgreSQL
      tags: postgresql
      block:

      - name: "PostgreSQL: PGDG repository section"
        block:

        - name: "PostgreSQL: Check if pgdg-redhat-repo package is installed"
          shell: rpm -q pgdg-redhat-repo
          args:
            warn: false
          ignore_errors: true
          changed_when: false
          register: pgdg_rpm_check

        - name: "PostgreSQL: PGDG repository release package"
          yum:
            name: https://download.postgresql.org/pub/repos/yum/9.4/redhat/rhel-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm
            state: present
          when: pgdg_rpm_check.rc == 1

        - name: "PostgreSQL: PGDG repository signing key"
          rpm_key:
            key: https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG
            state: present
          when: pgdg_rpm_check.rc == 1

      - name: "PostgreSQL: Install PostgreSQL 9.4 server package"
        yum:
          name: postgresql94-server
          state: present

      - name: "PostgreSQL: Enable to start on boot"
        service:
          name: postgresql-9.4
          enabled: true

      - name: "PostgreSQL: Initialize data directory"
        command: /usr/pgsql-9.4/bin/postgresql94-setup initdb
        args:
          creates: /var/lib/pgsql/9.4/data/postgresql.conf

      - name: "PostgreSQL: Set up postgresql.conf"
        copy:
          src: files/postgresql/postgresql.conf
          dest: /var/lib/pgsql/9.4/data/postgresql.conf
          owner: postgres
          group: postgres
          backup: false
        register: postgresql_conf

      - name: "PostgreSQL: Set up pg_hba.conf"
        copy:
          src: files/postgresql/pg_hba.conf
          dest: /var/lib/pgsql/9.4/data/pg_hba.conf
          owner: postgres
          group: postgres
          backup: false
        register: pghba_conf

      - name: "PostgreSQL: Set up pg_ident.conf"
        copy:
          src: files/postgresql/pg_ident.conf
          dest: /var/lib/pgsql/9.4/data/pg_ident.conf
          owner: postgres
          group: postgres
          backup: false
        register: pgident_conf

      - name: "PostgreSQL: Start service"
        service:
          name: postgresql-9.4
          state: started

      - name: Restart PostgreSQL (if config file(s) changed)
        service:
          name: postgresql-9.4
          state: restarted
        when: postgresql_conf.changed or pghba_conf.changed or pgident_conf.changed

      - name: "PostgreSQL: Wait for service to start"
        wait_for:
          port: 5432

      - name: "PostgreSQL: add password to 'postgres' user"
        postgresql_user:
          name: postgres
          encrypted: true
          password: "{{ lookup('password', '/tmp/pg_postgres_passwd.txt chars=ascii_letters,digits') }}"

      - name: "PostgreSQL: 'dhis' user"
        postgresql_user:
          name: dhis
          encrypted: true
          password: "{{ lookup('password', '/tmp/pg_dhis_passwd.txt chars=ascii_letters,digits') }}"

      - name: "PostgreSQL: 'dhis2' database"
        postgresql_db:
          name: dhis2
          owner: dhis

      - name: "PostgreSQL: 'dhis2' database, 'public' schema"
        postgresql_schema:
          database: dhis2
          name: public
          owner: dhis

    - name: "Tomcat: Use the baosystems.tomcat role to install Tomcat"
      tags: tomcat
      include_role:
        name: baosystems.tomcat

    - name: "DHIS2"
      tags: dhis2
      block:

      - name: "DHIS2: Create DHIS2_HOME directory /opt/dhis2"
        file:
          path: /opt/dhis2
          state: directory
          owner: tomcat
          group: tomcat

      # hibernate.properties is for 2.21 and lower, works for 2.22
      - name: "DHIS2: Configuration file /opt/dhis2/hibernate.properties with database credentials"
        copy:
          dest: /opt/dhis2/hibernate.properties
          owner: tomcat
          group: tomcat
          backup: false
          content: |
            hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
            hibernate.connection.driver_class = org.postgresql.Driver
            hibernate.connection.url = jdbc:postgresql:dhis2
            hibernate.connection.username = dhis
            hibernate.connection.password = {{ lookup('password', '/tmp/pg_dhis_passwd.txt chars=ascii_letters,digits') }}
            hibernate.hbm2ddl.auto = update

      - name: "DHIS2: Download DHIS2 {{dhis2_version}} war file to Tomcat webapps"
        get_url:
          url: "https://s3.amazonaws.com/dhis2-builds/{{ dhis2_version }}/latest/dhis.war"
          checksum: "sha256:https://s3.amazonaws.com/dhis2-builds/{{ dhis2_version }}/latest/dhis.war.sha256"
          dest: /var/lib/tomcat/webapps/ROOT.war
          owner: tomcat
          group: tomcat

      - name: "DHIS2: Create directory to unarchive dhis.war into"
        file:
          path: /var/lib/tomcat/webapps/ROOT
          state: directory
          owner: tomcat
          group: tomcat

      - name: "DHIS2: Unarchive dhis.war"
        unarchive:
          src: /var/lib/tomcat/webapps/ROOT.war
          dest: /var/lib/tomcat/webapps/ROOT/
          creates: /var/lib/tomcat/webapps/ROOT/WEB-INF/web.xml
          owner: tomcat
          group: tomcat

      - name: "Tomcat: Start service"
        service:
          name: tomcat
          state: started

    - name: Nginx
      tags: nginx
      block:

      - name: "Nginx: install package"
        yum:
          name: nginx
          state: present

      - name: "Nginx: Configure proxy to Tomcat"
        block:

        - name: "Nginx: client_max_body_size 32m"
          lineinfile:
            path: /etc/nginx/nginx.conf
            insertafter: '^[^#]\s+access_log\s+/var/log/nginx/access.log\s+main;\s+'
            line: '    client_max_body_size 32m;'
            validate: nginx -c %s -t

        - name: "Nginx: proxy_pass"
          lineinfile:
            path: /etc/nginx/nginx.conf
            insertafter: '^[^#]\s+location\s+/\s+{'
            line: '          proxy_pass  http://localhost:8080;'
            validate: nginx -c %s -t

        - name: "Nginx: proxy_redirect"
          lineinfile:
            path: /etc/nginx/nginx.conf
            insertafter: '^[^#]\s+proxy_pass\s+'
            line: '          proxy_redirect  off;'
            validate: nginx -c %s -t

        - name: "Nginx: proxy_set_header Host"
          lineinfile:
            path: /etc/nginx/nginx.conf
            insertafter: '^[^#]\s+proxy_redirect\s+'
            line: '          proxy_set_header  Host               $http_host;'
            validate: nginx -c %s -t

        - name: "Nginx: proxy_set_header X-Forwarded-Proto"
          lineinfile:
            path: /etc/nginx/nginx.conf
            insertafter: '^[^#]\s+proxy_set_header\s+Host\s+'
            line: '          proxy_set_header  X-Forwarded-Proto  $scheme;'
            validate: nginx -c %s -t

      - name: "Nginx: Start service and enable to start on boot"
        service:
          name: nginx
          state: started
          enabled: true
